basePath: /api/v1
definitions:
  models.CategoryRequest:
    properties:
      description:
        type: string
      name:
        maxLength: 100
        type: string
    required:
    - name
    type: object
  models.CategoryResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      slug:
        type: string
      updated_at:
        type: string
    type: object
  models.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  models.ExerciseRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      name:
        type: string
    type: object
  models.ExerciseResponse:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.UserAuthRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.UserRegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
info:
  contact:
    email: support@example.com
    name: API Support
    url: https://www.example.com/support
  description: This is a API for managing online workout tracker
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Online Workout Tracker API
  version: "1.0"
paths:
  /categories:
    get:
      consumes:
      - application/json
      description: Get all categories from the database
      produces:
      - application/json
      responses:
        "200":
          description: List of categories
          schema:
            items:
              $ref: '#/definitions/models.CategoryResponse'
            type: array
        "400":
          description: Request cancelled
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Exercises not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "504":
          description: Request timeout
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create new category
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Category created
          schema:
            $ref: '#/definitions/models.CategoryResponse'
        "400":
          description: Request cancelled
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Category already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to save exercise
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "504":
          description: Request timeout
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create category
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete exercise by id
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Category successfully deleted
        "400":
          description: Request cancelled
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to delete exercise
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "504":
          description: Request timeout
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete exercise
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Get exercise by id
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Category data
          schema:
            $ref: '#/definitions/models.CategoryResponse'
        "400":
          description: Request cancelled
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error data receiving
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "504":
          description: Request timeout
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get exercise
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update category by id
      parameters:
      - description: Category id
        in: path
        name: id
        required: true
        type: integer
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Category successfully updated
          schema:
            $ref: '#/definitions/models.CategoryResponse'
        "400":
          description: Request cancelled
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Category not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Category already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to update category
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "504":
          description: Request timeout
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update category
      tags:
      - categories
  /exercises:
    get:
      consumes:
      - application/json
      description: Get all exercises from the database
      produces:
      - application/json
      responses:
        "200":
          description: List of exercises
          schema:
            items:
              $ref: '#/definitions/models.ExerciseResponse'
            type: array
        "400":
          description: Request cancelled
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Exercises not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "504":
          description: Request timeout
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all exercises
      tags:
      - exercises
    post:
      consumes:
      - application/json
      description: Create new exercise
      parameters:
      - description: Exercise data
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/models.ExerciseRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Exercise created
          schema:
            $ref: '#/definitions/models.ExerciseResponse'
        "400":
          description: Request cancelled
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Exercise already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to save exercise
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "504":
          description: Request timeout
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create exercise
      tags:
      - exercises
  /exercises/{id}:
    delete:
      consumes:
      - application/json
      description: Delete exercise by id
      parameters:
      - description: Exercise id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Exercise successfully deleted
        "400":
          description: Request cancelled
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Exercise not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to delete exercise
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "504":
          description: Request timeout
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete exercise
      tags:
      - exercises
    get:
      consumes:
      - application/json
      description: Get exercise by id
      parameters:
      - description: Exercise id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Exercise data
          schema:
            $ref: '#/definitions/models.ExerciseResponse'
        "400":
          description: Request cancelled
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Exercise not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Error data receiving
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "504":
          description: Request timeout
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get exercise
      tags:
      - exercises
    put:
      consumes:
      - application/json
      description: Update exercise by id
      parameters:
      - description: Exercise id
        in: path
        name: id
        required: true
        type: integer
      - description: Exercise data
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/models.ExerciseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Exercise successfully updated
          schema:
            $ref: '#/definitions/models.ExerciseResponse'
        "400":
          description: Request cancelled
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Exercise not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Exercise already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to update exercise
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "504":
          description: Request timeout
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update exercise
      tags:
      - exercises
  /login:
    post:
      consumes:
      - application/json
      description: Endpoint for login
      parameters:
      - description: User data (email, password)
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User login successfully
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Request cancelled
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to login user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "504":
          description: Request timeout
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User login
      tags:
      - auth
  /logout:
    post:
      description: Endpoint for logout
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User logout
      tags:
      - auth
  /profile:
    get:
      description: Endpoint for get user profile
      produces:
      - application/json
      responses:
        "200":
          description: User profile data
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Request cancelled
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to login user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "504":
          description: Request timeout
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User profile
      tags:
      - user
  /register:
    post:
      consumes:
      - application/json
      description: Endpoint for new user registration
      parameters:
      - description: User data (username, password, email)
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Request cancelled
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "409":
          description: Username already exists
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to register user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "504":
          description: Request timeout
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User registration
      tags:
      - auth
swagger: "2.0"
