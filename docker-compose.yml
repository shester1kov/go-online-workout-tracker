services:
  db:
    restart: always
    image: postgres:16-bookworm
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    command:
      - postgres
      - -p
      - ${POSTGRES_PORT}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -p ${POSTGRES_PORT}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_net

  redis:
    restart: always
    image: redis:7.4-alpine
    command:
      - redis-server
      - --port
      - ${REDIS_PORT}
      - --requirepass
      - ${REDIS_PASSWORD}
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "${REDIS_PORT}", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend_net

  backend:
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      PORT: ${PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_SSLMODE: ${POSTGRES_SSLMODE}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECURE_KEY: ${JWT_SECURE_KEY}
      ENV: docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT}/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_net

  backend2:
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      PORT: ${PORT2}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_SSLMODE: ${POSTGRES_SSLMODE}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECURE_KEY: ${JWT_SECURE_KEY}
      ENV: docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT2}/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_net

  backend3:
    restart: always
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      PORT: ${PORT3}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_SSLMODE: ${POSTGRES_SSLMODE}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECURE_KEY: ${JWT_SECURE_KEY}
      ENV: docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT3}/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend_net

  nginx:
    image: nginx:1.27.4-alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/:/etc/nginx/conf.d
      - ./nginx/logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
      backend2:
        condition: service_healthy
      backend3:
        condition: service_healthy
    networks:
      - backend_net

  fail2ban:
    image: crazymax/fail2ban:latest
    restart: always
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./fail2ban:/data
      - ./nginx/logs:/var/log/nginx:ro
    environment:
      - TZ=Europe/Moscow
    

volumes:
  postgres_data: {}
  redis_data: {}

networks:
  backend_net:
    driver: bridge
